tolower=T # convert to lower case
)
)
df_section.7<-
as.matrix(dtm_section.7)%>%
as_tibble()
# Macdonald
mcdonald.cik <- "0000063908"
raw.data %>% filter(cik == mcdonald.cik) %>%
select(industry.fama.french.49) %>% unlist()
#Coca-cola
cocacola.cik <- "0001491675"
raw.data %>% filter(cik == cocacola.cik) %>%
select(industry.fama.french.49) %>% unlist()
# Pepshi
pepsi.cik <- "0000077476"
raw.data %>% filter(cik == pepsi.cik) %>%
select(industry.fama.french.49) %>% unlist()
A <- c(1,0,0)
A <- c(0,1,1)
A*B
A <- c(1,0,0)
B <- c(0,1,1)
A*B
CosineSimilarity <- function(A,B){
sum(A*B)/
sqrt( sum(A^2) * sum(B^2))
}
View(CosineSimilarity)
CosineSimilarity(A,B)
# Construct a document-term-matrix limiting to terms only in 1-10% of the documents
# read the text data
vector_section.1 <- VectorSource(section.1.business)
# compile a corpus of texts
corpus_section.1 <- Corpus(vector_section.1)
# Construct a document-term-matrix limiting to terms only in 1-10% of the documents
# read the text data
vector_section.1 <- VectorSource(section.1.business)
# compile a corpus of texts
corpus_section.1 <- Corpus(vector_section.1)
dtm_section.1 <-
DocumentTermMatrix(corpus_section.1,
control = list(removePunctuation =T, # remove punctuation
removeNumbers =T, # remove numbers
stopwords=T, # remove stopwords
tolower=T # convert to lower case
)
)
View(dtm_section.1)
dtm_section.1[,1] %>%
as.vector()
#make binary
dtm_section.1$v <- rep(1, length(dtm_section.1$v))
?kmeans()
#
kmeans_result <-
kmeans(dtm_section.1$v, centers = 50)
#
tibble_section1 <-
dtm_section.1 %>%
as.tibble()
CosineSimilarity(
A = dtm[raw.data$cik == pepsi.cik],
B = dtm[raw.data$cik == cocacola.cik]
)
CosineSimilarity(
A = dtm_section.1[raw.data$cik == pepsi.cik],
B = dtm_section.1[raw.data$cik == cocacola.cik]
)
CosineSimilarity(
A = dtm_section.1[raw.data$cik == pepsi.cik,],
B = dtm_section.1[raw.data$cik == cocacola.cik,]
)
clusters <- kmeans(x = dtm_section.1, centers = 50)
set.seed(1234)
clusters$cluster %>%
str
clusters$industry.kmeans<-
clusters$cluster
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
GQL <- function(query,
...,
.token = NULL,
.variables = NULL,
.operationName = NULL,
.url = url) {
pbody <-
list(query = query,
variables = .variables,
operationName = .operationName)
if (is.null(.token)) {
res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# The URL we will use is stored below:
url <- "https://www.vegvesen.no/trafikkdata/api/"
# Let's figure out which sensor stations that are operable.
# The query below extracts all the stations, with a date for
# when the station was in operation as well as a long/latitude.
qry <-
'
{
trafficRegistrationPoints {
id
name
latestData {
volumeByDay
}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Allright - let's try submitting the query:
stations <-GQL(qry)
length(stations)
length(stations[[1]])
stations[[1]][[1]] %>% #1st column and 1st entry
as_tibble()
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
setwd("C:/Users/littl/ban400/iterations-Tomoko-Yamagata")
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
setwd("C:/Users/littl/ban400/iterations-Tomoko-Yamagata/gql-queries")
configs <-
read_yaml("vegvesen_configs.yml")
setwd("C:/Users/littl/ban400/iterations-Tomoko-Yamagata")
configs <-
read_yaml("vegvesen_configs.yml")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
View(stations_metadata)
View(stations_metadata)
stations_metadata %>%
as_tibble()
stations_metadata %>%
as.matrix() %>%
as_tibble()
stations_metadata$trafficRegistrationPoints %>%
as.matrix() %>%
as_tibble()
stations_metadata$trafficRegistrationPoints
stations_metadata$trafficRegistrationPoints[[1]]
stations_metadata$trafficRegistrationPoints[[1]] %>%
as.matrix() %>%
as_tibble()
stations_metadata$trafficRegistrationPoints[[1]] %>%
map(as_tibble)
stations_metadata[[1]] %>%
map(as_tibble)
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind()
transform_metadata_to_df<-
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind()
View(transform_metadata_to_df)
transform_metadata_to_df %>%
mutate(
latestData = as.character(transform_metadata_to_df$latestData)
)
transform_metadata_to_df %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/Berlin")
)
transform_metadata_to_df %>%
mutate(
latestData = as_datetime(
transform_metadata_to_df$latestData, tz="Europe/Berlin")
)
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/Berlin")
)
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/Berlin")
) -> transform_metadata_to_df
transform_metadata_to_df %>%
mutate(location = map(location, unlist))
transform_metadata_to_df %>%
mutate(location = map(location, unlist)) %>% # the location column becamse 2 levels
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
)
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="UTC")
) -> transform_metadata_to_df
tz
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/London")
) -> transform_metadata_to_df
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
)
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/London")
)
transform_metadata_to_df<-
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind()
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/London")
)
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/London")
) -> transform_metadata_to_df
transform_metadata_to_df %>%
# let the location column to be 2 levels
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
)
transform_metadata_to_df %>%
# let the location column to be 2 levels
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
) -> transform_metadata_to_df
transform_metadata_to_df %>%
# let the location column to be 2 levels
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
)  %>%
select(-location)
transform_metadata_to_df <-
transform_metadata_to_df %>%
# let the location column to be 2 levels
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
)  %>%
# unselect the older "location" column
select(-location)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
# Create the data frame from dtm
# by converting each column to tibble, then bind rows by the column names
df_stattions_metadata <-
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind()
# Convert the latestDate into char, and update the timezone
df_stattions_metadata<-
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/London")
) -> transform_metadata_to_df
# Create 2 columns "lat"& "lon" from "location" column
df_stattions_metadata <-
transform_metadata_to_df %>%
# let the location column to be 2 levels
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
)  %>%
# unselect the older "location" column
select(-location)
transform_metadata_to_df<-
function(stations_metadata){
# Create the data frame from dtm
# by converting each column to tibble, then bind rows by the column names
#df_stattions_metadata <-
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind()
# Convert the latestDate into char, and update the timezone
#df_stattions_metadata<-
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/London")
)
# Create 2 columns "lat"& "lon" from "location" column
#df_stattions_metadata <-
transform_metadata_to_df %>%
# let the location column to be 2 levels
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
)  %>%
# unselect the older "location" column
select(-location)
}
)
function(stations_metadata)
function(stations_metadata)
transform_metadata_to_df(stations_metadata)
transform_metadata_to_df(stations_metadata)
df_stattions_metadata <-
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind()
# Convert the latestDate into char, and update the timezone
df_stattions_metadata<-
transform_metadata_to_df %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/London")
)
# Create the data frame from dtm
# by converting each column to tibble, then bind rows by the column names
df_stattions_metadata <-
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind()
# Convert the latestDate into char, and update the timezone
df_stattions_metadata <-
df_stattions_metadata %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/London")
)
df_stattions_metadata <-
df_stattions_metadata %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="UTC")
)
df_stattions_metadata <-
df_stattions_metadata %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="")
)
df_stattions_metadata <-
df_stattions_metadata %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/London")
) # "UTC" became an error, then used London instead.
df_stattions_metadata <-
df_stattions_metadata %>%
# let the location column to be 2 levels
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
)  %>%
# unselect the older "location" column
select(-location)
transform_metadata_to_df<-
function(stations_metadata){
# Create the data frame from dtm
# by converting each column to tibble, then bind rows by the column names
df_stattions_metadata <-
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind()
# Convert the latestDate into char, and update the timezone
df_stattions_metadata <-
df_stattions_metadata %>%
mutate(
latestData = map_chr(latestData,
1,
.default =NA_character_)
) %>%
mutate(
latestData = as_datetime(latestData, tz="Europe/London")
) # "UTC" became an error, then used London instead.
# Create 2 columns "lat"& "lon" from "location" column
df_stattions_metadata <-
df_stattions_metadata %>%
# let the location column to be 2 levels
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
)  %>%
# unselect the older "location" column
select(-location)
}
transform_metadata_to_df(stations_metadata)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)

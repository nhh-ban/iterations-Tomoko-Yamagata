install.packages("purrr")
#Load packages
library(tidyverse)
library(purrr)
df<-
tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = rnorm(10)
)
col_summary <-
function(df,fun){
out <- vector("double", length(df))
for(i in seq_along(df)){
out[i] <- fun(df[[i]])
}
out
}
col_summary(df,mean)
mean(df$a)
#Check what we are iterating
1:ncol(df)
seq_along(df)
#[]
df[i]
df[[i]]
for(i in seq_along(df)){
out[i] <- fun(df[[i]])
}
col_summary <-
function(df,fun){
out <- vector("double", length(df))
for(i in seq_along(df)){
out[i] <- fun(df[[i]])
}
out
}
col_summary(df,mean)
#[]
df[i]
df[[i]]
# map()
map(df, mean)
map(df,mean) %>% #return a list
bind_cols()
df2<-
map(df,mean) %>% #return a list
bind_cols() # return columns in 1 row
df2<-
map(mean,trim=.1) %>% #return a list
bind_cols() # return columns in 1 row
df2<-
map(mean,trim=.1) %>% #return a list
bind_cols()
df2 %>%
map(
{
\(x)mean(x)/sd(x)
}
) %>%
bind_cols()
mtcars
mtcars %>%
split(~cyl)
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(msg~wt, data =x)
}
)
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
)
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary)
cyl_regressions<-
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary) #return statistic results in each cyl's list
View(cyl_regressions)
cyl_regressions[[i]]$r.squared
cyl_regressions<-
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary) %>%  #return statistic results in each cyl's list
map(
{
\(x) x$r.squared
}
)
cyl_regressions[[i]]$r.squared
cyl_regressions<-
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary) %>%  #return statistic results in each cyl's list
map("r.squared")
cyl_regressions[[i]]$r.squared
df2 %>%
map(
{
\(x) mean(x)/sd(x)
}
) %>%
bind_cols()
df2<-
map(mean,trim=.1) %>% #return a list
bind_cols() # return columns in 1 row
df2
df2 %>%
map(mean,trim=.1) %>% #return a list
bind_cols() # return columns in 1 row
df %>%
map(mean,trim=.1) %>% #return a list
bind_cols() # return columns in 1 row
df %>%
map(
{
\(x) mean(x)/sd(x)
}
) %>%
bind_cols()
cyl_regressions<-
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary) %>%  #return statistic results in each cyl's list
map("r.squared")
cyl_regressions[[i]]$r.squared
cyl_regressions<-
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary) %>%  #return statistic results in each cyl's list
map("r.squared")
cyl_regressions[[1]]$r.squared
cyl_regressions[[i]]$r.squared
View(cyl_regressions)
View(cyl_regressions)
numbers<- list(1,2,3,4,5)
squared_numbers <- map(numbers, ~ .x^2)
library(tidyverse)
library(purrr)
> squared_numbers <- map(numbers, ~ .x^2)
squared_numbers <- map(numbers, ~ .x^2)
squared_numbers[[1]]
squared_numbers[[2]]
squared_numbers[1]
squared_numbers[2]
setwd("C:/Users/littl/ban400/iterations-Tomoko-Yamagata")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
GQL <- function(query,
...,
.token = NULL,
.variables = NULL,
.operationName = NULL,
.url = url) {
pbody <-
list(query = query,
variables = .variables,
operationName = .operationName)
if (is.null(.token)) {
res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# The URL we will use is stored below:
url <- "https://www.vegvesen.no/trafikkdata/api/"
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
library(glue)
View(stations_metadata_df)
stations_metadata_df %>%
id == "97411V72313"
stations_metadata_df %>%
filter(id == "97411V72313")
stations_metadata_df %>%
mutate(
from= to_iso8601(stations_metadata_df$latestData[1],-Offset),
to= to_iso8601(stations_metadata_df$latestData[1],0)
)
vegvesen_format <-
format(stations_metadata_df$latestData, format = "%Y-%m-%d %H:%M")
head(vegvesen_format)
stations_metadata_df %>%
mutate(
latestData = format(stations_metadata_df$latestData,
format = "%Y-%m-%d %H:%M")
)
View(stations_metadata)
stations_metadata_df <-
stations_metadata_df %>%
mutate(
latestData = format(stations_metadata_df$latestData,
format = "%Y-%m-%d %H:%M")
)
volume_result <-
trafficData(trafficRegistrationPointId: {id}) {
volume_result <-
trafficData(trafficRegistrationPointId: {id}) {
result <- glue(volume,
id %in% c(stations_metadata_df$id),
from = from,
to = to)
result <- glue(volume_result,
id %in% c(stations_metadata_df$id),
from = from,
to = to)
volume_result <-
trafficData(trafficRegistrationPointId: {id}) {
volume_result <-
trafficData(trafficRegistrationPointId: {id}) {
vol_qry <-
function(id, from, to)
{
# convert "latestDate" into the Vegvesen-format
stations_metadata_df <-
stations_metadata_df %>%
mutate(
latestData = format(stations_metadata_df$latestData,
format = "%Y-%m-%d %H:%M")
)
volume_result <-
trafficData(trafficRegistrationPointId: {id}) {
vol_qry <-
function(id, from, to)
{
# convert "latestDate" into the Vegvesen-format
stations_metadata_df <-
stations_metadata_df %>%
mutate(
latestData = format(stations_metadata_df$latestData,
format = "%Y-%m-%d %H:%M")
)
volume_result <-
{
trafficData(trafficRegistrationPointId: {id}) {

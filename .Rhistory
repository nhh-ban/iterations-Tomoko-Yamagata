install.packages("purrr")
#Load packages
library(tidyverse)
library(purrr)
df<-
tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = rnorm(10)
)
col_summary <-
function(df,fun){
out <- vector("double", length(df))
for(i in seq_along(df)){
out[i] <- fun(df[[i]])
}
out
}
col_summary(df,mean)
mean(df$a)
#Check what we are iterating
1:ncol(df)
seq_along(df)
#[]
df[i]
df[[i]]
for(i in seq_along(df)){
out[i] <- fun(df[[i]])
}
col_summary <-
function(df,fun){
out <- vector("double", length(df))
for(i in seq_along(df)){
out[i] <- fun(df[[i]])
}
out
}
col_summary(df,mean)
#[]
df[i]
df[[i]]
# map()
map(df, mean)
map(df,mean) %>% #return a list
bind_cols()
df2<-
map(df,mean) %>% #return a list
bind_cols() # return columns in 1 row
df2<-
map(mean,trim=.1) %>% #return a list
bind_cols() # return columns in 1 row
df2<-
map(mean,trim=.1) %>% #return a list
bind_cols()
df2 %>%
map(
{
\(x)mean(x)/sd(x)
}
) %>%
bind_cols()
mtcars
mtcars %>%
split(~cyl)
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(msg~wt, data =x)
}
)
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
)
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary)
cyl_regressions<-
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary) #return statistic results in each cyl's list
View(cyl_regressions)
cyl_regressions[[i]]$r.squared
cyl_regressions<-
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary) %>%  #return statistic results in each cyl's list
map(
{
\(x) x$r.squared
}
)
cyl_regressions[[i]]$r.squared
cyl_regressions<-
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary) %>%  #return statistic results in each cyl's list
map("r.squared")
cyl_regressions[[i]]$r.squared
df2 %>%
map(
{
\(x) mean(x)/sd(x)
}
) %>%
bind_cols()
df2<-
map(mean,trim=.1) %>% #return a list
bind_cols() # return columns in 1 row
df2
df2 %>%
map(mean,trim=.1) %>% #return a list
bind_cols() # return columns in 1 row
df %>%
map(mean,trim=.1) %>% #return a list
bind_cols() # return columns in 1 row
df %>%
map(
{
\(x) mean(x)/sd(x)
}
) %>%
bind_cols()
cyl_regressions<-
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary) %>%  #return statistic results in each cyl's list
map("r.squared")
cyl_regressions[[i]]$r.squared
cyl_regressions<-
mtcars %>%
split(~cyl) %>% #split the dataframe by cyl into 3 dataframes(cyl=4,6,8)
map(
{
\(x) lm(mpg~wt, data =x)
}
) %>%
map(summary) %>%  #return statistic results in each cyl's list
map("r.squared")
cyl_regressions[[1]]$r.squared
cyl_regressions[[i]]$r.squared
View(cyl_regressions)
View(cyl_regressions)
numbers<- list(1,2,3,4,5)
squared_numbers <- map(numbers, ~ .x^2)
library(tidyverse)
library(purrr)
> squared_numbers <- map(numbers, ~ .x^2)
squared_numbers <- map(numbers, ~ .x^2)
squared_numbers[[1]]
squared_numbers[[2]]
squared_numbers[1]
squared_numbers[2]
#Load packages
library(tidyverse)
library(purrr)
df<-
tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = rnorm(10)
)
df[[1]]
View(df)
df[1]
length(df)
vector("double", length(df))
vector(length(df))
#Check what we are iterating
1:ncol(df)
seq_along(df)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
setwd("C:/Users/littl/ban400/iterations-Tomoko-Yamagata")
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
source("functions/data_transformations.r")
here*()
here()
library(here)
here()
here("data_transformations.r")
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
setwd("C:/Users/littl/ban400/iterations-Tomoko-Yamagata")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
